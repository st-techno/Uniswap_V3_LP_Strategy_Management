from web3 import Web3
from uniswap import Uniswap
import time

# Initialize Web3 and Uniswap connection
w3 = Web3(Web3.HTTPProvider('YOUR_INFURA_OR_ALCHEMY_URL'))
wallet_address = 'YOUR_WALLET_ADDRESS'
private_key = 'YOUR_PRIVATE_KEY'
uniswap = Uniswap(address=wallet_address, private_key=private_key, version=3)

# Risk management thresholds (customize these based on your strategy)
LOWER_THRESHOLD = 0.95  # Lower price range (e.g., 5% below current price)
UPPER_THRESHOLD = 1.05  # Upper price range (e.g., 5% above current price)
LIQUIDITY_BUFFER = 0.2  # Fraction of liquidity to add/remove dynamically

# Add Liquidity Function
def add_liquidity(token0, token1, amount0, amount1, fee):
    try:
        tx = uniswap.add_liquidity(token0, token1, amount0, amount1, fee=fee)
        print(f"Liquidity added: {tx}")
        return tx
    except Exception as e:
        print(f"Error adding liquidity: {e}")

# Remove Liquidity Function
def remove_liquidity(token_id, amount):
    try:
        tx = uniswap.remove_liquidity(token_id, amount)
        print(f"Liquidity removed: {tx}")
        return tx
    except Exception as e:
        print(f"Error removing liquidity: {e}")

# Get Current Positions
def get_positions():
    try:
        positions = uniswap.get_positions()
        print(f"Current positions: {positions}")
        return positions
    except Exception as e:
        print(f"Error fetching positions: {e}")
        return []

# Sophisticated Risk Management Strategy
def risk_management(token_id):
    try:
        # Fetch current price and position details
        current_price = uniswap.get_price(token_id)
        positions = get_positions()
        
        # Find the position for the given token ID
        position = next((p for p in positions if p['id'] == token_id), None)
        
        if not position:
            print("No position found for the given token ID.")
            return
        
        # Extract details from the position
        token0 = position['token0']
        token1 = position['token1']
        amount0 = position['amount0']
        amount1 = position['amount1']
        fee = position['fee']
        
        print(f"Managing risk for Token ID {token_id} | Current Price: {current_price}")
        
        # Adjust liquidity based on price thresholds
        if current_price < LOWER_THRESHOLD:
            # Price is below the lower threshold — remove some liquidity to reduce risk
            remove_amount = position['liquidity'] * LIQUIDITY_BUFFER
            print(f"Price below threshold. Removing {remove_amount} liquidity...")
            remove_liquidity(token_id, remove_amount)
        
        elif current_price > UPPER_THRESHOLD:
            # Price is above the upper threshold — add more liquidity to capitalize on gains
            add_amount0 = amount0 * LIQUIDITY_BUFFER
            add_amount1 = amount1 * LIQUIDITY_BUFFER
            print(f"Price above threshold. Adding more liquidity...")
            add_liquidity(token0, token1, add_amount0, add_amount1, fee)
        
        else:
            print("Price within acceptable range. No action needed.")
    
    except Exception as e:
        print(f"Error in risk management: {e}")

# Main Loop to Monitor and Manage Liquidity Dynamically
def main():
    token_id_to_manage = 'YOUR_TOKEN_ID'  # Replace with your specific token ID
    
    while True:
        try:
            # Perform risk management periodically (e.g., every minute)
            risk_management(token_id_to_manage)
            
            # Sleep for a specified interval before rechecking (e.g., 60 seconds)
            time.sleep(60)
        
        except KeyboardInterrupt:
            print("Exiting program...")
            break
        
        except Exception as e:
            print(f"Error in main loop: {e}")

# Run the main function
if __name__ == "__main__":
    main()
